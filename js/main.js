$( document ).ready(function() {

    // Fade out PHP generated alerts
    $(".alert").fadeTo(3500, 600).slideUp(400, function () {
        $(".alert").slideUp(600);
        $(".alert").remove();
    });


    // Attach Events to Bucket container
    $( '#buckets' ).on( 'click', 'li', function( event ) {
      console.log( this ); // logs the list item that was clicked
        fetchBuckets(this);
    });

    // Inject bucket objects
    // which will in turn inject category Objects
    // which will then ibject task objects
    fetchBuckets();

    // Attach Event to Category container
    $( '#categories' ).on( 'click', 'li.task', function( event ) {
      console.log( this ); // logs the list item that was clicked
    });

    // Construct Task objects

    // Attach events to task objects

    // Inject Task Objects into Category containers

    // Inject Category Containers into body


});


/*********************************************************************
** Function: fetchBuckets
** Description: Handler to fetch buckets for the backend and display
**     add them to the bucket container. Set the active class on the
**     currently viewed bucket. Trigger the loading of
**     categories and tasks for this bucket.
** Parameters: alerts object
** Return: none
*********************************************************************/
function fetchBuckets(elem) {

  jQuery.get( "forms/getbuckets.php", function( data ) {

    resp = JSON.parse(data);
    buckets = resp.buckets;

    $('#buckets').empty();

    console.log(resp);

    if (buckets.length > 0 ) {

      var html = '';
      for(i = 0; i < buckets.length; i++) {

        var item = document.createElement("li");
        var link = document.createElement("a");
        var id = 'bucket_' + buckets[i]['bucket_id'];
        var current = '';
        // If nothing was clicked, set the first bucket as default
        if ($.isEmptyObject(elem) && i == 0) {
          item.classList.add('active');
          $('#bucketTitle').html(buckets[i]['bucket_title']);
          current = id;
        } else
        if (!$.isEmptyObject(elem) && elem.id == id) {
          item.classList.add('active');
          $('#bucketTitle').html(buckets[i]['bucket_title']);
          current = id;
        }

        // Load categories for the default bucket
        //loadCategories(current);

        // Build nav links and inject into #buckets ul
        item.id = id;
        item.classList.add('nav-item');
        link.classList.add('nav-link');
        link.href='#';
        link.text = buckets[i]['bucket_name'];
        item.appendChild(link);
        $('#buckets').append(item);

      }
    }
    // Append the add bucket item cheaply by using a string
    html +='<li class="nav-item">'
           + '<a class="nav-link" title="Add Bucket" href="#" data-toggle="modal" data-target="#addBucket"><i class="fas fa-folder-plus fa-lg"></i></a></li>';
    $('#buckets').append(html);

    // Handle any alerts that were generated by the backend.
    parseAlerts(resp['messages']);
  });

}
