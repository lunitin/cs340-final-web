/**********************************************************************
** Program Filename: main.js
** Author: Casey Dinsmore
** Date: 2018-11-24
** Description: Core JS button events and data fetch functions.
********************************************************************/

$( document ).ready(function() {

    // Fade out PHP generated alerts
    $(".alert").fadeTo(3500, 600).slideUp(400, function () {
        $(".alert").slideUp(600);
        $(".alert").remove();
    });

    // Attach a delegated stopsort handler for .sortable() event for .list-group
    // elements and handle posting new sort order (and possibly category) to
    // the backend.
    $( '#categories' ).on( 'sortstop', '.list-group', function( event, ui ) {

      // Collect the new sort order
      sort = {};
      $('.list-group').each(function(i, ul) {
        sort[$(ul).attr('data-category-id')] = {};

        $(ul).children('li').each(function(j, li) {
          sort[$(ul).attr('data-category-id')][$(li).attr('data-task-id')] = j;
        });
      });

      // POST sort data to the backend
      jQuery.post( "forms/tasksort.php", {sort: sort}, function( data ) {
        resp = JSON.parse(data);
        // Handle any alerts that were generated by the backend.
        parseAlerts(resp['messages']);
      });
    });


    // Attach .sortable() to #categories to allow cards to be
    // sorted using the .card-header div, then update the db with new order
    $( "#categories" ).sortable({
      handle: '.card-header',
      //connectWith: '#buckets', // connector for bucket dropping
      deactivate: function(event,ui) {
        // Collect the new sort order
        sort = {};
        $('#categories').children('div.card').each(function(i, card) {
         sort[$(card).attr('data-category-id')] = i;
        });

        // POST sort data to the backend
        jQuery.post( "forms/catsort.php", {sort: sort}, function( data ) {
         resp = JSON.parse(data);
         // Handle any alerts that were generated by the backend.
         parseAlerts(resp['messages']);
        });
      }
    });

    // @TODO Dragging and dropping categories into buckets is problematic
    //      need more investigation into receiving element event handling
    // $("#buckets").sortable({
    //     receive: function (event, ui) {
    //       //display the ID in the console log:
    //       console.log(event);
    //       console.log( event.target.id );
    //       console.log(ui.item[0].id);
    //     //  $('#'+ui.item[0].id).addClass('d-none');
    //       //$("#categories").sortable("cancel");
    //     }
    // });

    // Bucket navigation; switch the view when a new bucket tab
    // is clicked
    $( '#buckets' ).on( 'click', 'li', function( event ) {
        fetchBuckets(this);
    });

    // DELETE {bucket,category,task} Element
    $( 'body' ).on( 'click', 'i.rm, button.rm', function( event ) {
      deleteItem($(this));
    });


    // Attach handler to expand/collapse task details
    $( '#categories' ).on( 'click', 'i.fa-chevron-circle-up', function( event ) {
       $(this).toggleClass('fa-rotate-180');
       $('#task-details-'+ $(this).attr('data-task-id')).toggleClass('d-none');
    });

    // Inject bucket objects
    // which will in turn inject category Objects
    // which will then inject task objects
    fetchBuckets();

});


/*********************************************************************
** Function: fetchBuckets
** Description: Handler to fetch buckets for the backend and display
**     add them to the bucket container. Set the active class on the
**     currently viewed bucket. Trigger the loading of
**     categories and tasks for this bucket.
** Parameters: #bucket li.active object
** Return: none
*********************************************************************/
function fetchBuckets(elem) {

  jQuery.get( "forms/getbuckets.php", function( data ) {

    resp = JSON.parse(data);
    buckets = resp.buckets;

    // Empty any buckets incase of add/update/delete/resort
    $('#buckets').empty();

    // If we got a bucket array from the backend
    // Loop through it add items to the #buckets ul
    if (buckets.length > 0 ) {

      var html = '';
      for(i = 0; i < buckets.length; i++) {

        var item = document.createElement("li");
        var link = document.createElement("a");
        var id = 'bucket_' + buckets[i]['bucket_id'];

        // If this bucket is the active bucket, add the class
        // and update the bucket id attribute
        if ($.isEmptyObject(elem) && i == 0 ||
           !$.isEmptyObject(elem) && elem.id == id) {

          item.classList.add('active');
          item.setAttribute('data-bucket-id', buckets[i]['bucket_id']);

          // Update bucket buttons with new details
          updateBucketElements(buckets[i]);

          // Load categories for the default bucket
          fetchCategories(buckets[i]['bucket_id']);
        }

        // Build nav links and inject into #buckets ul
        item.id = id;
        item.classList.add('nav-item');
        link.classList.add('nav-link');
        link.href='#';
        link.text = buckets[i]['bucket_name'];
        item.appendChild(link);
        $('#buckets').append(item);

      }
    }

    // Append the add bucket item cheaply by using a string
    html ='<li class="nav-item">'
           + '<a class="nav-link" title="Add Bucket" href="#" data-toggle="modal" data-target="#addBucket"><i class="fas fa-folder-plus fa-lg"></i></a></li>';
    $('#buckets').append(html);

    // Handle any alerts that were generated by the backend.
    parseAlerts(resp['messages']);
  });

}


/*********************************************************************
** Function: bucketActions
** Description: Create the bucket action buttons
** Parameters: bucket object
** Return: none
*********************************************************************/
function updateBucketElements(bucket) {

  $('#bucketTitle').html( bucket['bucket_title']);

  $('#bucketActions').html('<i id="addNewCategory" title="Add Category"  data-bucket-id="'+bucket['bucket_id'] +'" data-toggle="modal" data-target="#addCategory" class="far fa-calendar-plus fa-2x mr-3"></i>'
    + '<i id="editBucket" title="Edit Bucket" data-bucket-id="'+bucket['bucket_id'] +'" data-toggle="modal" data-target="#addBucket" data-type="bucket" class="far fa-edit fa-2x mr-3" ></i>'
    + '<i id="rmBucket" title="Delete Bucket" data-bucket-id="'+bucket['bucket_id'] +'" data-type="bucket" class="far fa-trash-alt fa-2x rm" ></i>');

  $('#addNewCategory, #rmBucket').attr('data-bucket-id', );

}

/*********************************************************************
** Function: fetchBuckets
** Description: Handler to fetch buckets for the backend and display
**     add them to the bucket container. Set the active class on the
**     currently viewed bucket. Trigger the loading of
**     categories and tasks for this bucket.
** Parameters: bucket_id int
** Return: none
*********************************************************************/
function fetchCategories(bucket_id) {

  jQuery.get( "forms/getcattasks.php?bucket_id="+ bucket_id, function( data ) {

    resp = JSON.parse(data);

    // Empty any categories incase of add/update/delete/resort
    $('#categories').empty();

    // Create Category containers
    if (resp.categories.length > 0) {
      // For every category, create a container
      for(i = 0; i < resp.categories.length; i++) {
        // for every container, create a container object
        createCategoryCard(resp.categories[i]);
      }
    }

    // Create task objects and put them into the correct category container
    if (resp.tasks.length > 0) {
      // For every category, create a container
      for(i = 0; i < resp.tasks.length; i++) {
        // for every task, add a task object to category container
        createTask(resp.tasks[i]);

      }
    }

    // Handle any alerts that were generated by the backend.
    parseAlerts(resp['messages']);
  });

}


/*********************************************************************
** Function: createCategoryCard
** Description: Create the DOM div.card elements for a category and
**              inject it into the DOM.
** Parameters: category object
** Return: none
*********************************************************************/
function createCategoryCard(category) {

  category_id = 'category-' + category['category_id'];
  category_name = category['category_name'];

  var card = '<div class="card bg-light mb-3" id="'+category_id+'" data-category-id='+category['category_id']+'>'
            +'  <div class="card-header"><i class="fas fa-arrows-alt mr-2"></i>'
            +      category_name
            +'     <div class="float-right task-tools">'
            +'      <i class="far fa-plus-square t-add mr-2" title="Add Task" data-toggle="modal" data-target="#addTask" data-category-id="'+ category['category_id'] +'"></i>'
            +'      <i class="far fa-edit c-edit mr-1" title="Edit Category"  data-toggle="modal" data-target="#addCategory" data-category-id="'+category['category_id']+'"></i>'
            +'      <i class="far fa-trash-alt rm" title="Delete category" data-type="category" data-category-id="'+category['category_id']+'"></i>'
            +'    </div>'
            +'  </div>'
            +'  <ul class="list-group list-group-flush pt-3" id="'+category_id+'-ul" data-category-id='+category['category_id']+'>'
            +'  </ul>'
            +' </div>'
            +'</div>';

  $('#categories').append(card);

  // Attach a jQuery ui sortable handler on this list and connect to
  // other list-group items
  $( ".list-group" ).sortable({
      connectWith: ".list-group",
      tolerance: "pointer"
    }).disableSelection();
}


/*********************************************************************
** Function: createTask
** Description: Create the DOM li.list-group-item elements for a task
**              and inject it into the DOM.
** Parameters: task object
** Return: none
*********************************************************************/
function createTask(task) {

  var category_id = 'category-'+ task['category_id'];
  var task_id = 'task-' + task['task_id'];

  var task = '<li class="list-group-item" data-task-id='+task['task_id']+'>'
    + '<i class="fa fa-chevron-circle-up mr-2" data-task-id='+task['task_id']+'></i>'
    + task['task_name']
    + '<div class="float-right task-tools">'
    + '  <i class="far fa-edit t-edit mr-2" title="Edit Task" data-toggle="modal" data-category-id="'+task['category_id']+'" data-target="#addTask" data-task-id='+task['task_id']+'></i>'
    + '<i class="far fa-trash-alt rm" title="Delete Task" data-type="task" data-task-id='+task['task_id']+'></i>'
    + '</div><div class="card-body d-none" id="task-details-'+task['task_id']+'"><p class="card-text">'+task['task_details']+'</p>'
    + '<p class="card-text small">Created: '+task['created_date']+'</p></div></li>';

  $('#'+ category_id +'-ul').append(task);
}


/*********************************************************************
** Function: deleteItem
** Description: Handler used to delete buckets, categories, tasks and users
** Parameters: object that was clicked
** Return: none
*********************************************************************/
function deleteItem(obj) {

  // What type of button was clicked and what is the primary key ID?
  var type = obj.attr('data-type');
  var id = obj.attr('data-'+ type + '-id');

  // Load the appropriate message from the DOM
  var msg = $('#delete-'+type).html();

  if (confirm(msg)) {
    jQuery.get( "forms/delete.php?type="+ type+"&id=" +id , function( data ) {

      res = JSON.parse(data);

      // Logout after account deletion
      if (res.code == 206) {
        window.location.replace("/");
      }
      // Handle any alerts that were generated by the backend.
      parseAlerts(resp['messages']);

      // Refresh the page content
      if (type == 'bucket') {
        $('#categories, #bucketTitle, #bucketActions').empty();
        fetchBuckets();
      } else {
        fetchCategories($('#buckets li.active').attr('data-bucket-id'));
      }
    });
  }
}
